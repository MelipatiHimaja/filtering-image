from google.colab import drive
drive.mount('/content/drive')
#import libraries
import numpy as np
import cv2
import matplotlib.pyplot as plt
img_dir = '/content/drive/MyDrive/DIP/boy.jpg'  #this accepts the filepath

def rgb_img(img_dir):
    #reads from a BGR image file to a RGB
    img = cv2.imread(img_dir)
    return cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

def hsv_img(img_dir):
    #reads from a RGB image file to a HSV array
    hsv = cv2.imread(img_dir)
    return cv2.cvtColor(hsv, cv2.COLOR_RGB2HSV)

def img_read(img_dir):
    #reads from a RGB image file to grayscale image array
    rgb = rgb_img(img_dir)
    hsv = hsv_img(img_dir)
    gray = cv2.cvtColor(rgb, cv2.COLOR_RGB2GRAY)
    return rgb, hsv, gray
#define your function
i_rgb, i_hsv, i_gray = img_read(img_dir)
plt.figure(figsize=(10,10))
plt.imshow(i_rgb)
#scaling the image to quater of its actual size
img_scale = cv2.resize(i_rgb, (0,0), fx=0.5, fy=0.5)
img_scale = cv2.pyrDown(i_rgb)
num_iter = 5
for _ in range(num_iter):
    img_scale = cv2.bilateralFilter(img_scale, d=9, sigmaColor=9, sigmaSpace=7)
#restoring the image
i_blur = cv2.pyrUp(img_scale)
plt.figure(figsize=(10,10))
plt.imshow(i_blur)
# convert to grayscale and apply median blur
img_gray = cv2.cvtColor(i_rgb, cv2.COLOR_RGB2GRAY)
img_blur = cv2.medianBlur(img_gray, 7)
img_edge = cv2.adaptiveThreshold(img_blur, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 9, 2)
plt.figure(figsize=(10,10))
plt.imshow(img_edge)
def cartoon_filter(self, i_rgb):
    numDownSamples = 2 # number of downscaling steps
    numBilateralFilters = 7  # number of bilateral filtering steps

    #first step
    # downsample image using Gaussian pyramid
    img_color = i_rgb.copy()  # Create a copy to avoid modifying the original
    for _ in range(numDownSamples):
        img_color = cv2.pyrDown(img_color)

    # repeatedly apply small bilateral filter instead of applying
    # one large filter
    for _ in range(numBilateralFilters):
        img_color = cv2.bilateralFilter(img_color, 9, 9, 7)

    # upsample image to original size
    for _ in range(numDownSamples):
        img_color = cv2.pyrUp(img_color)
# Resize img_color to match josh_rgb dimensions before bitwise_and
    img_color = cv2.resize(img_color, (i_rgb.shape[1], josh_rgb.shape[0]))


    #combine steps steps 2 & 3
    # convert to grayscale and apply median blur
    img_gray = cv2.cvtColor(i_rgb, cv2.COLOR_RGB2GRAY)
    img_blur = cv2.medianBlur(img_gray, 7)

    #fourth step
    # detect and enhance edges
    img_edge = cv2.adaptiveThreshold(img_blur, 255,
        cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 9, 2)

    #fifth step
    # convert back to color so that it can be bit-AND
    # with color image
    img_edge = cv2.cvtColor(img_edge, cv2.COLOR_GRAY2RGB)
    return cv2.bitwise_and(img_color, img_edge)
c_image = cartoon_filter(img_edge, i_rgb)
plt.figure(figsize=(10,10))
plt.imshow(c_image)
